# -*- coding:utf-8 -*-

"""Contains functions and constants for building game logic."""


from itertools import count
from random import choice, randint

import prompt

ATTEMPTS = 3
OPERATORS = ('+', '-', '*')
RANDOM_FROM = 1
RANDOM_TO = 25
PROGRESSION_LENGTH = 10
GREET_TO_EVEN = 'Answer "yes" if number even otherwise answer "no".'
GREET_TO_CALC = 'What is the result of the expression?'
WELCOME = '\nWelcome to the Brain Games!'
GREET_TO_GCD = 'Find the greatest common divisor of given numbers.'
GREET_TO_PROG = 'What number is missing in the progression?'
PRIME = 'Answer "yes" if given number is prime. Otherwise answer "no".'


def call_random(start=RANDOM_FROM, stop=RANDOM_TO) -> int:
    """
    Return (pseudo)random integer.

    Args:
        start: first item in range, default is 1
        stop: last item in range, default is 256

    Returns:
        int
    """
    return randint(start, stop)     # noqa: S311


def is_even(number) -> bool:
    """
    Check, if number is even or not.

    Args:
        number: was generated by call_random function.

    Returns:
        bool: True is even, False is odd.
    """
    if number % 2 == 0:
        return True
    return False


def is_even_str(number) -> str:
    """
    Check, if number is even or not.

    Args:
        number: was generated by call_random function.

    Returns:
        str: 'yes' is even, 'no' is odd.
    """
    if number % 2 == 0:
        return 'yes'
    return 'no'


def call_operator(operators=OPERATORS) -> str:
    """
    Return randomly selected operator.

    Args:
        operators: set of possible values. Default is 4-elems set (constants).

    Returns:
        str: operator selected from set.
    """
    return choice(operators)        # noqa: S311


def answer_gcd(numbers) -> int:
    """
    Return answer on arithmetical expression.

    Args:
        numbers: list of integer.

    Returns:
        int: result of greatest common divider.
    """
    large = max(numbers)
    small = min(numbers)
    residual = large % small
    while residual != 0:
        large = small
        small = residual
        residual = large % small
    return small


def is_prime(number) -> bool:
    """
    Check, if number is prime.

    Args:
        number: integer.

    Returns:
        bool: True if number is prime, False if not.
    """
    start = 2
    while start < number // 2 + 1:
        if number % start == 0:
            return False
        start += 1
    return True


def is_prime_str(number) -> str:
    """
    Check, if number is prime.

    Args:
        number: integer.

    Returns:
        str: 'yes' if number is prime, 'no' if not.
    """
    start = 2
    while start < number:
        if number % start == 0:
            return 'no'
        start += 1
    return 'yes'


def convert_bool_to_str(answer) -> str:
    """
    Convert True into 'yes', False into 'no'.

    Args:
        answer: bool.

    Returns:
        str: 'yes' or 'no'.
    """
    if answer is True:
        return 'yes'
    return 'no'


def make_intro(*args):
    """
    Say welcome and rules of game.

    Args:
        *args: phrases for welcome speech.
    """
    for phrase in args:
        print(phrase)


def error_message(an, cr, name):
    """
    Print correct answer and say goodbye.

    Args:
        an: str - answer from user
        cr: str - correct answer from user
        name: str - user name

    """
    print("'{0}' is wrong answer ;(. Correct answer was '{1}'.".format(an, cr))
    print("Let's try again, {0}!".format(name))


def create_task_calc() -> list:
    """
    Return components for arithmetical expression.

    Returns:
        list: operands and operator.
    """
    first_item = call_random()
    operator = call_operator()
    second_item = call_random()
    return [first_item, operator, second_item]


def answer_calc(components) -> int:
    """
    Return answer on arithmetical expression.

    Args:
        components: list of operands and operator for arithmetica expression.

    Returns:
        int: result of expression.
    """
    if components[1] == '+':
        return components[0] + components[2]
    elif components[1] == '-':
        return components[0] - components[2]
    elif components[1] == '*':
        return components[0] * components[2]


def answer_calc_old(first_item, operator, second_item) -> int:
    """
    Return answer on arithmetical expression.

    Args:
        first_item: integer.
        second_item: integer.
        operator: str.

    Returns:
        int: result of expression.
    """
    if operator == '+':
        return first_item + second_item
    elif operator == '-':
        return first_item - second_item
    elif operator == '*':
        return first_item * second_item


def answer_even(number) -> str:
    """
    Return string value of checking, is number corect.

    Args:
        number: integer.

    Returns:
        str: 'yes' or 'no'.
    """
    correct = is_even(number)
    return convert_bool_to_str(correct)


def answer_prime(number) -> str:
    """
    Return string value of checking, is number corect.

    Args:
        number: integer.

    Returns:
        str: 'yes' or 'no'.
    """
    correct = is_prime(number)
    return convert_bool_to_str(correct)


def create_task_gcd() -> list:
    """
    Return list for gcd expression.

    Returns:
        list: two integer values.
    """
    first_item = call_random()
    second_item = call_random()
    return [first_item, second_item]


def call_progression(start, step, length=PROGRESSION_LENGTH) -> list:
    """
    Return list of integers for progression expression.

    Args:
        start: first item in range.
        step: last item in range.
        length: count of integers in this list.

    Returns:
        list: three integer values.
    """
    numbers = count(start=start, step=step)
    return list(next(numbers) for _ in range(length))       # noqa: C400


def create_task_prog() -> list:
    """
    Create components for progression task.

    Returns:
        list:
            list with progression sequence,
            index of hidden element,
            hidden value (task for user).
    """
    start = call_random(1, 10)
    step = call_random(1, 10)
    hidden_position = call_random(0, 9)
    progression = call_progression(start, step)
    return [progression, hidden_position, progression[hidden_position]]


def answer_prog(components) -> int:
    """
    Return hidden value in progression.

    Args:
        components: list.

    Returns:
        int: integer value.
    """
    return components[2]


def show_question(task, is_prog=False):
    """
    Print question and task to user.

    Args:
        task: function of generating task.
        is_prog: special flag for progression case.
    """
    if is_prog:
        temp = task[0]
        temp[task[1]] = '..'
        print('Question:', end=' ')
        print(*temp)
    else:
        if isinstance(task, list):       # noqa: WPS513
            str_list = [str(number) for number in task]
            str_list = ' '.join(str_list)
            print('Question:', end=' ')
            print(str_list)
        elif isinstance(task, int):
            print('Question: {0}'.format(task))


def game(greet, task, find_correct, answer_type='number', is_prog=False):
    """
    Make bolerplate for all games.

    Args:
        greet: special greet for specific game.
        task: function for creating question for user.
        find_correct: function for definig correct answer.
        answer_type: type of user`s answer (number or string).
        is_prog: special case for progression game.
    """
    make_intro(WELCOME, greet)
    user_name = prompt.string(prompt='\nMay I have your name? ')
    print('Hello, {0}!\n'.format(user_name))
    counter = ATTEMPTS
    while counter > 0:
        components = task()
        show_question(components, is_prog)
        if answer_type == 'number':
            answer = prompt.integer(prompt='Your answer: ')
        elif answer_type == 'string':
            answer = prompt.string(prompt='Your answer: ')
        correct = find_correct(components)
        if answer == correct:
            print('Correct!')
            counter = counter - 1
        else:
            error_message(answer, correct, user_name)
            break
        if counter == 0:
            print('Congratulations, {0}!\n'.format(user_name))
