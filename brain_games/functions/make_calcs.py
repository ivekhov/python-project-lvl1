# -*- coding:utf-8 -*-

"""Work with numbers in game."""


from itertools import count
from random import choice, randint

ATTEMPTS = 3
OPERATORS = ('+', '-', '*')
RANDOM_FROM = 1
RANDOM_TO = 25
PROGRESSION_LENGTH = 10
GREET_TO_EVEN = 'Answer "yes" if number even otherwise answer "no".'
GREET_TO_CALC = 'What is the result of the expression?'
WELCOME = '\nWelcome to the Brain Games!'
GREET_TO_GCD = 'Find the greatest common divisor of given numbers.'
GREET_TO_PROGRESSION = 'What number is missing in the progression?'
GREET_TO_PRIME = 'Answer "yes" if given number is prime. Otherwise answer "no".'


def call_random(start=RANDOM_FROM, stop=RANDOM_TO) -> int:
    """
    Return (pseudo)random integer.

    Args:
        start: first item in range, default is 1
        stop: last item in range, default is 256

    Returns:
        int
    """
    return randint(start, stop)     # noqa: S311


def is_even(number) -> bool:
    """
    Check, if number is even or not.

    Args:
        number: was generated by call_random function.

    Returns:
        bool: True is even, False is odd.
    """
    if number % 2 == 0:
        return True
    return False


def is_even_str(number) -> str:
    """
    Check, if number is even or not.

    Args:
        number: was generated by call_random function.

    Returns:
        str: 'yes' is even, 'no' is odd.
    """
    if number % 2 == 0:
        return 'yes'
    return 'no'


def call_operator(operators=OPERATORS) -> str:
    """
    Return randomly selected operator.

    Args:
        operators: set of possible values. Default is 4-elems set (constants).

    Returns:
        str: operator selected from set.
    """
    return choice(operators)        # noqa: S311


def answer_calc(first_item, second_item, operator) -> int:
    """
    Return answer on arithmetical expression.

    Args:
        first_item: integer.
        second_item: integer.
        operator: str.

    Returns:
        int: result of expression.
    """
    if operator == '+':
        return first_item + second_item
    elif operator == '-':
        return first_item - second_item
    elif operator == '*':
        return first_item * second_item


def answer_gcd(first_item, second_item) -> int:
    """
    Return answer on arithmetical expression.

    Args:
        first_item: integer.
        second_item: integer.

    Returns:
        int: result of greatest common divider.
    """
    if first_item > second_item:
        large, small = first_item, second_item
    else:
        small, large = first_item, second_item
    residual = large % small
    while residual != 0:
        large = small
        small = residual
        residual = large % small
    return small


def call_progression(start, step, length=PROGRESSION_LENGTH) -> list:
    """
    Return list of integers.

    Args:
        start: first item in range
        step: last item in range
        length: count of integers in this list

    Returns:
        list: of integers
    """
    numbers = count(start=start, step=step)
    return list(next(numbers) for _ in range(length))       # noqa: C400


def is_prime(number) -> bool:
    """
    Check, if number is prime.

    Args:
        number: integer.

    Returns:
        bool: True if number is prime, False if not.
    """
    start = 2
    while start < number // 2:
        if number % start == 0:
            return False
        start += 1
    return True


def is_prime_str(number) -> str:
    """
    Check, if number is prime.

    Args:
        number: integer.

    Returns:
        str: 'yes' if number is prime, 'no' if not.
    """
    start = 2
    while start < number:
        if number % start == 0:
            return 'no'
        start += 1
    return 'yes'


def convert_bool_to_str(answer) -> str:
    """
    Convert True into 'yes', False into 'no'.

    Args:
        answer: bool.

    Returns:
        str: 'yes' or 'no'.
    """
    if answer is True:
        return 'yes'
    return 'no'
